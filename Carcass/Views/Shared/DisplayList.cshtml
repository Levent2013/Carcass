@model IEnumerable<object>
@{ 
    var properties = new ModelMetadata[0];
    var itemTypeName = "object";
    if (Model != null && Model.Count() > 0) 
    {
        var item = Model.First();
        var itemType = item.GetType();
        itemTypeName = itemType.Name;
        
        if(itemType.Module.ScopeName ==	"EntityProxyModule") {
            itemTypeName = itemTypeName.Substring(0, itemTypeName.IndexOf("_"));
        }
            
        properties = ModelMetadata.FromLambdaExpression(m => item, ViewData)
            .Properties
            .Where(pm => ShouldShow(pm, ViewData))
            .ToArray();
    }
}


@{ 
    ViewBag.Title = "List of " + itemTypeName; }

@functions 
{ 
    public static bool ShouldShow(ModelMetadata metadata, ViewDataDictionary viewData) 
    {
        return metadata.ShowForDisplay
            && !metadata.IsComplexType
            && !viewData.TemplateInfo.Visited(metadata);
    }
}

<table class="table table">
  <tr>
    @foreach(var property in properties) {
        <th>@property.GetDisplayName()</th>
    }
  </tr>
    
    @{
        var index = 0;
        foreach(var obj in Model) 
        {
            
            var item = ModelMetadata.FromLambdaExpression(m => obj, ViewData);
            <tr>
            @foreach(var property in properties) 
            {
                <td>
                    @{ 
                        var propertyMetadata = item.Properties.Single(m => m.PropertyName == property.PropertyName);
                        @propertyMetadata.SimpleDisplayText
                    }
                </td>
            }
        </tr>
        }
        }
</table>