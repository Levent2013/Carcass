@model Carcass.Models.RegisterModel
@using Carcass.Common.Resources;
@{ ViewBag.Title = AccountResources.RegistrationForm; }


<div class="alert alert-comment">
    <button type="button" class="close" data-dismiss="alert">×</button>
    Example of <code>Html.CarcassValidationSummary</code> usage. 
    It replaces legacy MVC <code>Html.ValidationSummary</code> with Bootstrap style alert.
    Both client-side and server-side validation supported.

    Also <code>Html.CarcassBeginForm</code> used to create nice form with minimal coding.
<pre>
@@using (Html.CarcassBeginForm())
{
    @@Html.AntiForgeryToken()
    @@Html.CarcassValidationSummary(false, "Validation failed")
    @@Html.CarcassFieldFor(m => m.UserName, new { placeholder = AccountResources.UserName, autocomplete = "off" })
    @@Html.CarcassFieldFor(m => m.Password, new { placeholder = AccountResources.Password, autocomplete = "off" })
    @@Html.CarcassFieldFor(m => m.ConfirmPassword, new { placeholder = AccountResources.ConfirmPassword, autocomplete = "off" })
    
    @@Html.CarcassFormActions(new Dictionary<string, object> 
        { { Buttons.Register, new { type = "submit", @@class="btn-primary" }} });
}
</pre>
</div>

@using (Html.CarcassBeginForm())
{
    @Html.AntiForgeryToken()
    @Html.CarcassValidationSummary(false, "Validation failed")
    @Html.CarcassFieldFor(m => m.UserName, new { placeholder = AccountResources.UserName, autocomplete = "off" })
    @Html.CarcassFieldFor(m => m.Password, new { placeholder = AccountResources.Password, autocomplete = "off" })
    @Html.CarcassFieldFor(m => m.ConfirmPassword, new { placeholder = AccountResources.ConfirmPassword, autocomplete = "off" })
   
    @Html.CarcassFormActions(new Dictionary<string, object> 
        { { Carcass.Resources.Buttons.Register, new { type = "submit", @class="btn-primary" }} });
}

@section Scripts {
    @Scripts.Render("~/bundles/prettify")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render(Url.Action("Validation", "Localization", new { culture = System.Threading.Thread.CurrentThread.CurrentUICulture.Name } ))
}
